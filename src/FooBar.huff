
/** 
 *  FOO_BAR HUFF EXERCISE
 *
 *  Majority of ethereum contracts hold logic divide this logic into functions which users can specify and call to execute a particular logic without clashing into the other
 *  
 *  The task is to write within the `MAIN` macro below, huff code that mimics 2 solidity functions. 
 *      - One named `foo()` that simply returns 2,
 *      - the second named `bar()` that simply returns 3.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function foo() payable returns(uint256)
 #define function bar() payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {
  returndatasize // [0x00]
  calldataload // [n]
  0xE0 // [0xE0, n] takes in 224
  shr // [n >> 224] takes in the first 4 bytes of the calldata by shifting right by 224 bits

  dup1 __FUNC_SIG(foo) eq foo jumpi
  dup1 __FUNC_SIG(bar) eq bar jumpi 

  invalid 
 
  foo:
    0x02 // [0x02]
    returndatasize // [0x00, 0x03]
    mstore
    0x20 // [0x20]
    returndatasize // [0x00, 0x20]
    return // []

  bar:
    0x03 // [0x03]
    returndatasize // [0x00, 0x03]
    mstore
    0x20 // [0x20]
    returndatasize // [0x00, 0x20]
    return // []
}